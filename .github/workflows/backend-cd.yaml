name: Backend Continuous Deployment

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  workflow_dispatch:  # Allows manual execution

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Cache pipenv virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.cache/pipenv
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install dependencies
        run: pipenv install --dev

      - name: Run linting
        run: pipenv run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Cache pipenv virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.cache/pipenv
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install dependencies
        run: pipenv install --dev

      - name: Run tests
        run: pipenv run test

  build:
    name: Build Docker Image
    needs: [lint, test]  # Runs only if lint & test pass
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t mp-backend:latest .

  push-to-ecr:
    name: Push Docker Image to ECR
    needs: build  # Runs only if build succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to ECR
        run: |
          docker tag mp-backend:latest ${{ secrets.ECR_REPOSITORY_URL }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URL }}:latest

  deploy:
    name: Deploy to EKS
    needs: push-to-ecr  # Runs only if ECR push succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/backend-deployment.yaml --namespace=${{ vars.EKS_NAMESPACE }}
          kubectl rollout status deployment/backend --namespace=${{ vars.EKS_NAMESPACE }}

      - name: Verify Deployment
        run: |
          kubectl get pods --namespace=${{ vars.EKS_NAMESPACE }}